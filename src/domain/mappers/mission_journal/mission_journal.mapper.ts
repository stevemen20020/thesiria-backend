// Auto-generated by tools/generate-mappers.ts
import { mission_journal, Prisma } from "@prisma/client";
import { MissionJournalEntity } from "../../entities";
import { ObjectParserForMapper } from "../../helpers/ObjectParserForMapper.helper";

export class MissionJournalMapper {
  static prismaToEntity(
    model: Prisma.mission_journalGetPayload<{
      include: {
        missions:{
          include:{
            mission_fases:true
          }
        }
      };
    }>
  ): MissionJournalEntity {
    const mapped: MissionJournalEntity = {
      id:
        model.id !== null && model.id !== undefined ? model.id.toString() : "",
      playableCharacterId:
        model.playable_character_id !== null &&
        model.playable_character_id !== undefined
          ? model.playable_character_id.toString()
          : "",
      missionId:
        model.mission_id !== null && model.mission_id !== undefined
          ? model.mission_id.toString()
          : "",
      completed:
        model.completed !== null && model.completed !== undefined
          ? model.completed.toString()
          : "",
      missions: model.missions ? ObjectParserForMapper(model.missions) : undefined,
    };

    return mapped;
  }

  static entityToPrisma(entity: MissionJournalEntity): mission_journal {
    // ⚠️ Ajusta manualmente si tu modelo tiene campos obligatorios/autogenerados.
    return {
      id: entity.id as any,
      playable_character_id: entity.playableCharacterId as any,
      mission_id: entity.missionId as any,
      completed: entity.completed as any,
    } as mission_journal;
  }
}

export default MissionJournalMapper;
