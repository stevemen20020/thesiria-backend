// Auto-generated by tools/generate-mappers.ts
import { effects, Prisma } from "@prisma/client";
import { EffectsEntity } from "../../entities/effects/effects.entity";
import { ObjectParserForMapper } from "../../helpers/ObjectParserForMapper.helper";

export class EffectsMapper {
  static prismaToEntity(
    model: Prisma.effectsGetPayload<{
      include: {
        spells:true
      };
    }>
  ): EffectsEntity {
    const mapped: EffectsEntity = {
      id:
        model.id !== null && model.id !== undefined ? model.id.toString() : "",
      name:
        model.name !== null && model.name !== undefined
          ? model.name.toString()
          : "",
      description:
        model.description !== null && model.description !== undefined
          ? model.description.toString()
          : "",
      durationInRounds:
        model.duration_in_rounds !== null &&
        model.duration_in_rounds !== undefined
          ? model.duration_in_rounds.toString()
          : "",
      spells: model.spells ? ObjectParserForMapper(model.spells) : undefined,
    };

    return mapped;
  }

  static entityToPrisma(entity: EffectsEntity): effects {
    // ⚠️ Ajusta manualmente si tu modelo tiene campos obligatorios/autogenerados.
    return {
      id: entity.id as any,
      name: entity.name as any,
      description: entity.description as any,
      duration_in_rounds: entity.durationInRounds as any,
    } as effects;
  }
}

export default EffectsMapper;
