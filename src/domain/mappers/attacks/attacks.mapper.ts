// Auto-generated by tools/generate-mappers.ts
import { attacks, Prisma } from "@prisma/client";
import { AttacksEntity } from "../../entities/attacks/attacks.entity";
import { attacks_attack_type as PrismaAttackType } from "@prisma/client";
import { attacks_attack_type as DomainAttackType } from '../../enums/attacks_attack_type'
import { attacks_weapon_type as PrismaWeaponType } from "@prisma/client";
import { attacks_weapon_type as DomainWeaponType } from '../../enums/attacks_weapon_type'
import { ObjectParserForMapper } from "../../helpers/ObjectParserForMapper.helper";

export class AttacksMapper {
  static prismaToEntity(
    model: Prisma.attacksGetPayload<{
      include: {
        playable_character:true,
        skill_usage_attacks_skill_usageToskill_usage:true,
        npc:true
      };
    }>
  ): AttacksEntity {
    const mapped: AttacksEntity = {
      id:
        model.id !== null && model.id !== undefined ? model.id.toString() : "",
      idPlayableCharacter:
        model.id_playable_character !== null &&
        model.id_playable_character !== undefined
          ? model.id_playable_character.toString()
          : "",
      idNpc:
        model.id_npc !== null && model.id_npc !== undefined
          ? model.id_npc.toString()
          : "",
      skillUsage:
        model.skill_usage !== null && model.skill_usage !== undefined
          ? model.skill_usage.toString()
          : "",
      name:
        model.name !== null && model.name !== undefined
          ? model.name.toString()
          : "",
      weaponType:
        model.weapon_type !== undefined ? (DomainWeaponType[model.weapon_type as keyof typeof PrismaWeaponType]) : 
        DomainWeaponType.MELEE,
      attackType:
        model.attack_type !== undefined ? (DomainAttackType[model.attack_type as keyof typeof PrismaAttackType]) : 
        DomainAttackType.PLAYER2MONSTER,
      attackPoints:
        model.attack_points !== null && model.attack_points !== undefined
          ? model.attack_points.toString()
          : "",
      favorite:
        model.favorite !== null && model.favorite !== undefined
          ? model.favorite.toString()
          : "",
      uses:
        model.uses !== null && model.uses !== undefined
          ? model.uses.toString()
          : "",
      maxUses:
        model.max_uses !== null && model.max_uses !== undefined
          ? model.max_uses.toString()
          : "",
      playableCharacter: model.playable_character
        ? ObjectParserForMapper(model.playable_character)
        : undefined,
      skillUsageAttacksSkillUsageToskillUsage:
        model.skill_usage_attacks_skill_usageToskill_usage
          ? ObjectParserForMapper(model.skill_usage_attacks_skill_usageToskill_usage)
          : undefined,
      npc: model.npc ? ObjectParserForMapper(model.npc) : undefined,
    };

    return mapped;
  }

  static entityToPrisma(entity: AttacksEntity): attacks {
    // ⚠️ Ajusta manualmente si tu modelo tiene campos obligatorios/autogenerados.
    return {
      id: entity.id as any,
      id_playable_character: entity.idPlayableCharacter as any,
      id_npc: entity.idNpc as any,
      skill_usage: entity.skillUsage as any,
      name: entity.name as any,
      weapon_type: entity.weaponType as any,
      attack_type: entity.attackType as any,
      attack_points: entity.attackPoints as any,
      favorite: entity.favorite as any,
      uses: entity.uses as any,
      max_uses: entity.maxUses as any,
    } as attacks;
  }
}

export default AttacksMapper;
