// Auto-generated by tools/generate-mappers.ts
import { structures, Prisma } from "@prisma/client";
import { StructuresEntity } from "../../entities/structures/structures.entity";
import { structures_type as PrismStructuresType} from '@prisma/client'
import { structures_type as DomainStructuresType} from '../../enums/structures_type'

export class StructuresMapper {
  static prismaToEntity(
    model: Prisma.structuresGetPayload<{
    }>
  ): StructuresEntity {
    const mapped: StructuresEntity = {
      id:
        model.id !== null && model.id !== undefined ? model.id.toString() : "",
      name:
        model.name !== null && model.name !== undefined
          ? model.name.toString()
          : "",
      description:
        model.description !== null && model.description !== undefined
          ? model.description.toString()
          : "",
      difficulty:
        model.difficulty !== null && model.difficulty !== undefined
          ? model.difficulty.toString()
          : "",
      locationId:
        model.location_id !== null && model.location_id !== undefined
          ? model.location_id.toString()
          : "",
      type: model.type !== undefined ? (DomainStructuresType[model.type as keyof typeof PrismStructuresType]) : DomainStructuresType.CITY,
    };

    return mapped;
  }

  static entityToPrisma(entity: StructuresEntity): structures {
    // ⚠️ Ajusta manualmente si tu modelo tiene campos obligatorios/autogenerados.
    return {
      id: entity.id as any,
      name: entity.name as any,
      description: entity.description as any,
      difficulty: entity.difficulty as any,
      location_id: entity.locationId as any,
      type: entity.type as any,
    } as structures;
  }
}

export default StructuresMapper;
