// Auto-generated by tools/generate-mappers.ts
import { weapon, Prisma } from "@prisma/client";
import { WeaponEntity } from "../../entities/weapon/weapon.entity";
import { ObjectParserForMapper } from "../../helpers/ObjectParserForMapper.helper";
import { weapon_rarity as PrismaWeaponRarity } from "@prisma/client";
import { weapon_rarity as DomainWeaponRarity } from '../../enums/weapon_rarity'
import { weapon_weapon_type as PrismaWeaponType } from "@prisma/client";
import { weapon_weapon_type as DomainWeaponType } from '../../enums/weapon_weapon_type'

export class WeaponMapper {
  static prismaToEntity(
    model: Prisma.weaponGetPayload<{
      include: {
        
        elements?: true
        tiles?: true
        objects?: true
      };
    }>
  ): WeaponEntity {
    const mapped: WeaponEntity = {
      id:
        model.id !== null && model.id !== undefined ? model.id.toString() : "",
      name:
        model.name !== null && model.name !== undefined
          ? model.name.toString()
          : "",
      elementId:
        model.element_id !== null && model.element_id !== undefined
          ? model.element_id.toString()
          : "",
      damagePointsLvl1:
        model.damage_points_lvl1 !== null &&
        model.damage_points_lvl1 !== undefined
          ? model.damage_points_lvl1.toString()
          : "",
      damagePointsLvl2:
        model.damage_points_lvl2 !== null &&
        model.damage_points_lvl2 !== undefined
          ? model.damage_points_lvl2.toString()
          : "",
      damagePointsLvl3:
        model.damage_points_lvl3 !== null &&
        model.damage_points_lvl3 !== undefined
          ? model.damage_points_lvl3.toString()
          : "",
      damagePointsLvl4:
        model.damage_points_lvl4 !== null &&
        model.damage_points_lvl4 !== undefined
          ? model.damage_points_lvl4.toString()
          : "",
      damagePointsLvl5:
        model.damage_points_lvl5 !== null &&
        model.damage_points_lvl5 !== undefined
          ? model.damage_points_lvl5.toString()
          : "",
      upgradeItemId:
        model.upgrade_item_id !== null && model.upgrade_item_id !== undefined
          ? model.upgrade_item_id.toString()
          : "",
      upgradeCostLvl2:
        model.upgrade_cost_lvl2 !== null &&
        model.upgrade_cost_lvl2 !== undefined
          ? model.upgrade_cost_lvl2.toString()
          : "",
      upgradeCostLvl3:
        model.upgrade_cost_lvl3 !== null &&
        model.upgrade_cost_lvl3 !== undefined
          ? model.upgrade_cost_lvl3.toString()
          : "",
      upgradeCostLvl4:
        model.upgrade_cost_lvl4 !== null &&
        model.upgrade_cost_lvl4 !== undefined
          ? model.upgrade_cost_lvl4.toString()
          : "",
      upgradeCostLvl5:
        model.upgrade_cost_lvl5 !== null &&
        model.upgrade_cost_lvl5 !== undefined
          ? model.upgrade_cost_lvl5.toString()
          : "",
      rarity: model.rarity !== undefined ? (DomainWeaponRarity[model.rarity as keyof typeof PrismaWeaponRarity]) : DomainWeaponRarity.COMMON,
      durability:
        model.durability !== null && model.durability !== undefined
          ? model.durability.toString()
          : "",
      durabilityMax:
        model.durability_max !== null && model.durability_max !== undefined
          ? model.durability_max.toString()
          : "",
      chipping:
        model.chipping !== null && model.chipping !== undefined
          ? model.chipping.toString()
          : "",
      ammo:
        model.ammo !== null && model.ammo !== undefined
          ? model.ammo.toString()
          : "",
      weaponType: model.weapon_type !== undefined ? (DomainWeaponType[model.weapon_type as keyof typeof PrismaWeaponType]) : DomainWeaponType.MELEE,
      locationId:
        model.location_id !== null && model.location_id !== undefined
          ? model.location_id.toString()
          : "",
      skillUsage:
        model.skill_usage !== null && model.skill_usage !== undefined
          ? model.skill_usage.toString()
          : "",
      diceNeeded:
        model.dice_needed !== null && model.dice_needed !== undefined
          ? model.dice_needed.toString()
          : "",
      found:
        model.found !== null && model.found !== undefined
          ? model.found.toString()
          : "",
      priceSell:
        model.price_sell !== null && model.price_sell !== undefined
          ? model.price_sell.toString()
          : "",
      priceBuy:
        model.price_buy !== null && model.price_buy !== undefined
          ? model.price_buy.toString()
          : "",
      description:
        model.description !== null && model.description !== undefined
          ? model.description.toString()
          : "",
      image:
        model.image !== null && model.image !== undefined
          ? model.image.toString()
          : "",
      elements: model.elements ? ObjectParserForMapper(model.elements) : undefined,
      tiles: model.tiles ? ObjectParserForMapper(model.tiles) : undefined,
      objects: model.objects ? ObjectParserForMapper(model.objects) : undefined,
    };

    return mapped;
  }

  static entityToPrisma(entity: WeaponEntity): weapon {
    // ⚠️ Ajusta manualmente si tu modelo tiene campos obligatorios/autogenerados.
    return {
      id: entity.id as any,
      name: entity.name as any,
      element_id: entity.elementId as any,
      damage_points_lvl1: entity.damagePointsLvl1 as any,
      damage_points_lvl2: entity.damagePointsLvl2 as any,
      damage_points_lvl3: entity.damagePointsLvl3 as any,
      damage_points_lvl4: entity.damagePointsLvl4 as any,
      damage_points_lvl5: entity.damagePointsLvl5 as any,
      upgrade_item_id: entity.upgradeItemId as any,
      upgrade_cost_lvl2: entity.upgradeCostLvl2 as any,
      upgrade_cost_lvl3: entity.upgradeCostLvl3 as any,
      upgrade_cost_lvl4: entity.upgradeCostLvl4 as any,
      upgrade_cost_lvl5: entity.upgradeCostLvl5 as any,
      rarity: entity.rarity as any,
      durability: entity.durability as any,
      durability_max: entity.durabilityMax as any,
      chipping: entity.chipping as any,
      ammo: entity.ammo as any,
      weapon_type: entity.weaponType as any,
      location_id: entity.locationId as any,
      skill_usage: entity.skillUsage as any,
      dice_needed: entity.diceNeeded as any,
      found: entity.found as any,
      price_sell: entity.priceSell as any,
      price_buy: entity.priceBuy as any,
      description: entity.description as any,
      image: entity.image as any,
    } as weapon;
  }
}

export default WeaponMapper;
