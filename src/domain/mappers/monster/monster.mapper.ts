// Auto-generated by tools/generate-mappers.ts
import { monster, Prisma } from "@prisma/client";
import { MonsterEntity } from "../../entities/monster/monster.entity";

export class MonsterMapper {
  static prismaToEntity(
    model: Prisma.monsterGetPayload<{ 

    }>
  ): MonsterEntity {
    const mapped: MonsterEntity = {
      id:
        model.id !== null && model.id !== undefined ? model.id.toString() : "",
      name:
        model.name !== null && model.name !== undefined
          ? model.name.toString()
          : "",
      strength:
        model.strength !== null && model.strength !== undefined
          ? model.strength.toString()
          : "",
      dexterity:
        model.dexterity !== null && model.dexterity !== undefined
          ? model.dexterity.toString()
          : "",
      defense:
        model.defense !== null && model.defense !== undefined
          ? model.defense.toString()
          : "",
      aim:
        model.aim !== null && model.aim !== undefined
          ? model.aim.toString()
          : "",
      speed:
        model.speed !== null && model.speed !== undefined
          ? model.speed.toString()
          : "",
      agility:
        model.agility !== null && model.agility !== undefined
          ? model.agility.toString()
          : "",
      imageReference:
        model.image_reference !== null && model.image_reference !== undefined
          ? model.image_reference.toString()
          : "",
      health:
        model.health !== null && model.health !== undefined
          ? model.health.toString()
          : "",
      maxHealth:
        model.max_health !== null && model.max_health !== undefined
          ? model.max_health.toString()
          : "",
    };

    return mapped;
  }

  static entityToPrisma(entity: MonsterEntity): monster {
    // ⚠️ Ajusta manualmente si tu modelo tiene campos obligatorios/autogenerados.
    return {
      id: entity.id as any,
      name: entity.name as any,
      strength: entity.strength as any,
      dexterity: entity.dexterity as any,
      defense: entity.defense as any,
      aim: entity.aim as any,
      speed: entity.speed as any,
      agility: entity.agility as any,
      image_reference: entity.imageReference as any,
      health: entity.health as any,
      max_health: entity.maxHealth as any,
    } as monster;
  }
}

export default MonsterMapper;
