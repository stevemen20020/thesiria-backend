// Auto-generated by tools/generate-mappers.ts
import { npc, Prisma } from "@prisma/client";
import { NpcEntity } from "../../entities/npc/npc.entity";
import { ObjectParserForMapper } from "../../helpers/ObjectParserForMapper.helper";

export class NpcMapper {
  static prismaToEntity(
    model: Prisma.npcGetPayload<{
      include: {
        attacks?: {
          include: {
            skill_usage_attacks_skill_usageToskill_usage?: true
          };
        };
        loottables?: {
          include: {
            objects?: true
          };
        };
        races?: true,
        affinity?: {
          include: {
            elements?: true
          };
        };
        armor?: {
          include: {
            elements?: true
            skill_usage_armor_skill_usageToskill_usage?: true
          };
        };
        weapon?: {
          include: {
            elements?: true
            skill_usage_weapon_skill_usageToskill_usage?: true
          };
        };
        haki_types?: {
          include: {
            skill_usage?: true
          };
        };
        devil_fruit?: {
          include: {
            skill_usage?: true
          };
        };
        npc_inventory?: {
          include: {
            objects?: true
          };
        };
      };
    }>
  ): NpcEntity {
    const mapped: NpcEntity = {
      id:
        model.id !== null && model.id !== undefined ? model.id.toString() : "",
      name:
        model.name !== null && model.name !== undefined
          ? model.name.toString()
          : "",
      biography:
        model.biography !== null && model.biography !== undefined
          ? model.biography.toString()
          : "",
      idRace:
        model.id_race !== null && model.id_race !== undefined
          ? model.id_race.toString()
          : "",
      strength:
        model.strength !== null && model.strength !== undefined
          ? model.strength.toString()
          : "",
      dexterity:
        model.dexterity !== null && model.dexterity !== undefined
          ? model.dexterity.toString()
          : "",
      defense:
        model.defense !== null && model.defense !== undefined
          ? model.defense.toString()
          : "",
      aim:
        model.aim !== null && model.aim !== undefined
          ? model.aim.toString()
          : "",
      vision:
        model.vision !== null && model.vision !== undefined
          ? model.vision.toString()
          : "",
      speed:
        model.speed !== null && model.speed !== undefined
          ? model.speed.toString()
          : "",
      handcraft:
        model.handcraft !== null && model.handcraft !== undefined
          ? model.handcraft.toString()
          : "",
      agility:
        model.agility !== null && model.agility !== undefined
          ? model.agility.toString()
          : "",
      charisma:
        model.charisma !== null && model.charisma !== undefined
          ? model.charisma.toString()
          : "",
      wisdom:
        model.wisdom !== null && model.wisdom !== undefined
          ? model.wisdom.toString()
          : "",
      affinityId:
        model.affinity_id !== null && model.affinity_id !== undefined
          ? model.affinity_id.toString()
          : "",
      chroniclerStatus:
        model.chronicler_status !== null &&
        model.chronicler_status !== undefined
          ? model.chronicler_status.toString()
          : "",
      imageReference:
        model.image_reference !== null && model.image_reference !== undefined
          ? model.image_reference.toString()
          : "",
      bossImageReference:
        model.boss_image_reference !== null &&
        model.boss_image_reference !== undefined
          ? model.boss_image_reference.toString()
          : "",
      armorId:
        model.armor_id !== null && model.armor_id !== undefined
          ? model.armor_id.toString()
          : "",
      weaponId:
        model.weapon_id !== null && model.weapon_id !== undefined
          ? model.weapon_id.toString()
          : "",
      hakiLevel:
        model.haki_level !== null && model.haki_level !== undefined
          ? model.haki_level.toString()
          : "",
      hakiType:
        model.haki_type !== null && model.haki_type !== undefined
          ? model.haki_type.toString()
          : "",
      devilFruitId:
        model.devil_fruit_id !== null && model.devil_fruit_id !== undefined
          ? model.devil_fruit_id.toString()
          : "",
      health:
        model.health !== null && model.health !== undefined
          ? model.health.toString()
          : "",
      maxHealth:
        model.max_health !== null && model.max_health !== undefined
          ? model.max_health.toString()
          : "",
      attacks: model.attacks ? ObjectParserForMapper(model.attacks) : undefined,
      loottables: model.loottables ? ObjectParserForMapper(model.loottables) : undefined,
      races: model.races ? ObjectParserForMapper(model.races) : undefined,
      affinity: model.affinity ? ObjectParserForMapper(model.affinity) : undefined,
      armor: model.armor ? ObjectParserForMapper(model.armor) : undefined,
      weapon: model.weapon ? ObjectParserForMapper(model.weapon) : undefined,
      hakiTypes: model.haki_types ? ObjectParserForMapper(model.haki_types) : undefined,
      devilFruit: model.devil_fruit ? ObjectParserForMapper(model.devil_fruit) : undefined,
      npcInventory: model.npc_inventory ? ObjectParserForMapper(model.npc_inventory) : undefined,
    };

    return mapped;
  }

  static entityToPrisma(entity: NpcEntity): npc {
    // ⚠️ Ajusta manualmente si tu modelo tiene campos obligatorios/autogenerados.
    return {
      id: entity.id as any,
      name: entity.name as any,
      biography: entity.biography as any,
      id_race: entity.idRace as any,
      strength: entity.strength as any,
      dexterity: entity.dexterity as any,
      defense: entity.defense as any,
      aim: entity.aim as any,
      vision: entity.vision as any,
      speed: entity.speed as any,
      handcraft: entity.handcraft as any,
      agility: entity.agility as any,
      charisma: entity.charisma as any,
      wisdom: entity.wisdom as any,
      affinity_id: entity.affinityId as any,
      chronicler_status: entity.chroniclerStatus as any,
      image_reference: entity.imageReference as any,
      boss_image_reference: entity.bossImageReference as any,
      armor_id: entity.armorId as any,
      weapon_id: entity.weaponId as any,
      haki_level: entity.hakiLevel as any,
      haki_type: entity.hakiType as any,
      devil_fruit_id: entity.devilFruitId as any,
      health: entity.health as any,
      max_health: entity.maxHealth as any,
    } as npc;
  }
}

export default NpcMapper;
