// Auto-generated by tools/generate-mappers.ts
import { playable_character, Prisma } from "@prisma/client";
import { PlayableCharacterEntity } from "../../entities";
import { ObjectParserForMapper } from "../../helpers/ObjectParserForMapper.helper";

export class PlayableCharacterMapper {
  static prismaToEntity(
    model: Prisma.playable_characterGetPayload<{
      include: {
        attacks: {
          include: {
            skill_usage_attacks_skill_usageToskill_usage: true;
          };
        };
        inventory: {
          include: {
            objects: {
              include: {
                elements: true;
              };
            };
          };
        };
        inventory_armor_inventory_armor_id_userToplayable_character: {
          include: {
            armor: {
              include: {
                elements: true;
                objects: true;
                npc: true;
              };
            };
          };
        };
        inventory_armor_playable_character_armor_idToinventory_armor: {
          include: {
            armor: {
              include: {
                elements: true;
                objects: true;
                npc: true;
              };
            };
          };
        };
        inventory_magic: {
          include: {
            spells: {
              include: {
                effects: true;
                skill_usage_spells_skill_usageToskill_usage: true;
                objects: true;
              };
            };
          };
        };
        inventory_weapon_inventory_weapon_id_userToplayable_character: {
          include: {
            weapon: {
              include: {
                elements: true;
                objects: true;
                npc: true;
              };
            };
          };
        };
        inventory_weapon_playable_character_weapon_idToinventory_weapon: {
          include: {
            weapon: {
              include: {
                elements: true;
                objects: true;
                npc: true;
              };
            };
          };
        };
        races: true;
        affinity: {
          include: {
            elements: true;
          };
        };
        haki_types: true;
        devil_fruit: true;
        playable_character_journal:{
          include:{
            npc:true
          }
        },
        mission_journal:{
          include:{
            missions:{
              include:{
                mission_fases:true
              }
            }
          }
        }
      };
    }>
  ): PlayableCharacterEntity {
    const mapped: PlayableCharacterEntity = {
      id:
        model.id !== null && model.id !== undefined ? model.id.toString() : "",
      userId:
        model.user_id !== null && model.user_id !== undefined
          ? model.user_id.toString()
          : "",
      name:
        model.name !== null && model.name !== undefined
          ? model.name.toString()
          : "",
      biography:
        model.biography !== null && model.biography !== undefined
          ? model.biography.toString()
          : "",
      idRace:
        model.id_race !== null && model.id_race !== undefined
          ? model.id_race.toString()
          : "",
      positiveCharacteristic_1:
        model.positive_characteristic_1 !== null &&
        model.positive_characteristic_1 !== undefined
          ? model.positive_characteristic_1.toString()
          : "",
      positiveCharacteristic_2:
        model.positive_characteristic_2 !== null &&
        model.positive_characteristic_2 !== undefined
          ? model.positive_characteristic_2.toString()
          : "",
      positiveCharacteristic_3:
        model.positive_characteristic_3 !== null &&
        model.positive_characteristic_3 !== undefined
          ? model.positive_characteristic_3.toString()
          : "",
      negativeCharacteristic_1:
        model.negative_characteristic_1 !== null &&
        model.negative_characteristic_1 !== undefined
          ? model.negative_characteristic_1.toString()
          : "",
      negativeCharacteristic_2:
        model.negative_characteristic_2 !== null &&
        model.negative_characteristic_2 !== undefined
          ? model.negative_characteristic_2.toString()
          : "",
      strength:
        model.strength !== null && model.strength !== undefined
          ? model.strength.toString()
          : "",
      dexterity:
        model.dexterity !== null && model.dexterity !== undefined
          ? model.dexterity.toString()
          : "",
      defense:
        model.defense !== null && model.defense !== undefined
          ? model.defense.toString()
          : "",
      aim:
        model.aim !== null && model.aim !== undefined
          ? model.aim.toString()
          : "",
      vision:
        model.vision !== null && model.vision !== undefined
          ? model.vision.toString()
          : "",
      speed:
        model.speed !== null && model.speed !== undefined
          ? model.speed.toString()
          : "",
      handcraft:
        model.handcraft !== null && model.handcraft !== undefined
          ? model.handcraft.toString()
          : "",
      agility:
        model.agility !== null && model.agility !== undefined
          ? model.agility.toString()
          : "",
      charisma:
        model.charisma !== null && model.charisma !== undefined
          ? model.charisma.toString()
          : "",
      wisdom:
        model.wisdom !== null && model.wisdom !== undefined
          ? model.wisdom.toString()
          : "",
      affinityId:
        model.affinity_id !== null && model.affinity_id !== undefined
          ? model.affinity_id.toString()
          : "",
      chroniclerStatus:
        model.chronicler_status !== null &&
        model.chronicler_status !== undefined
          ? model.chronicler_status.toString()
          : "",
      imageReference:
        model.image_reference !== null && model.image_reference !== undefined
          ? model.image_reference.toString()
          : "",
      armorId:
        model.armor_id !== null && model.armor_id !== undefined
          ? model.armor_id.toString()
          : "",
      weaponId:
        model.weapon_id !== null && model.weapon_id !== undefined
          ? model.weapon_id.toString()
          : "",
      hakiLevel:
        model.haki_level !== null && model.haki_level !== undefined
          ? model.haki_level.toString()
          : "",
      hakiTypeId:
        model.haki_type_id !== null && model.haki_type_id !== undefined
          ? model.haki_type_id.toString()
          : "",
      devilFruitId:
        model.devil_fruit_id !== null && model.devil_fruit_id !== undefined
          ? model.devil_fruit_id.toString()
          : "",
      devilFruitAwakening:
        model.devil_fruit_awakening !== null &&
        model.devil_fruit_awakening !== undefined
          ? model.devil_fruit_awakening.toString()
          : "",
      money:
        model.money !== null && model.money !== undefined
          ? model.money.toString()
          : "",
      health:
        model.health !== null && model.health !== undefined
          ? model.health.toString()
          : "",
      maxHealth:
        model.max_health !== null && model.max_health !== undefined
          ? model.max_health.toString()
          : "",
      activeMaxHealth:
        model.active_max_health !== null &&
        model.active_max_health !== undefined
          ? model.active_max_health.toString()
          : "",
      attacks: model.attacks ? ObjectParserForMapper(model.attacks) : undefined,
      inventory: model.inventory
        ? ObjectParserForMapper(model.inventory)
        : undefined,
      inventoryArmorInventoryArmorIdUserToplayableCharacter:
        model.inventory_armor_inventory_armor_id_userToplayable_character
          ? ObjectParserForMapper(
              model.inventory_armor_inventory_armor_id_userToplayable_character
            )
          : undefined,
      inventoryArmorPlayableCharacterArmorIdToinventoryArmor:
        model.inventory_armor_playable_character_armor_idToinventory_armor
          ? ObjectParserForMapper(
              model.inventory_armor_playable_character_armor_idToinventory_armor
            )
          : undefined,
      inventoryMagic: model.inventory_magic
        ? ObjectParserForMapper(model.inventory_magic)
        : undefined,
      inventoryWeaponInventoryWeaponIdUserToplayableCharacter:
        model.inventory_weapon_inventory_weapon_id_userToplayable_character
          ? ObjectParserForMapper(
              model.inventory_weapon_inventory_weapon_id_userToplayable_character
            )
          : undefined,
      inventoryWeaponPlayableCharacterWeaponIdToinventoryWeapon:
        model.inventory_weapon_playable_character_weapon_idToinventory_weapon
          ? ObjectParserForMapper(
              model.inventory_weapon_playable_character_weapon_idToinventory_weapon
            )
          : undefined,
      races: model.races ? ObjectParserForMapper(model.races) : undefined,
      hakiTypes: model.haki_types ? ObjectParserForMapper(model.haki_types) : undefined,
      affinity: model.affinity ? ObjectParserForMapper(model.affinity) : undefined,
      devilFruit: model.devil_fruit ? ObjectParserForMapper(model.devil_fruit) : undefined,
      playableCharacterJournal: model.playable_character_journal ? ObjectParserForMapper(model.playable_character_journal) : undefined,
      missionJournal: model.mission_journal ? ObjectParserForMapper(model.mission_journal) : undefined,
    };

    return mapped;
  }

  static entityToPrisma(entity: PlayableCharacterEntity): playable_character {
    // ⚠️ Ajusta manualmente si tu modelo tiene campos obligatorios/autogenerados.
    return {
      id: entity.id as any,
      user_id: entity.userId as any,
      name: entity.name as any,
      biography: entity.biography as any,
      id_race: entity.idRace as any,
      positive_characteristic_1: entity.positiveCharacteristic_1 as any,
      positive_characteristic_2: entity.positiveCharacteristic_2 as any,
      positive_characteristic_3: entity.positiveCharacteristic_3 as any,
      negative_characteristic_1: entity.negativeCharacteristic_1 as any,
      negative_characteristic_2: entity.negativeCharacteristic_2 as any,
      strength: entity.strength as any,
      dexterity: entity.dexterity as any,
      defense: entity.defense as any,
      aim: entity.aim as any,
      vision: entity.vision as any,
      speed: entity.speed as any,
      handcraft: entity.handcraft as any,
      agility: entity.agility as any,
      charisma: entity.charisma as any,
      wisdom: entity.wisdom as any,
      affinity_id: entity.affinityId as any,
      chronicler_status: entity.chroniclerStatus as any,
      image_reference: entity.imageReference as any,
      armor_id: entity.armorId as any,
      weapon_id: entity.weaponId as any,
      haki_level: entity.hakiLevel as any,
      haki_type_id: entity.hakiTypeId as any,
      devil_fruit_id: entity.devilFruitId as any,
      devil_fruit_awakening: entity.devilFruitAwakening as any,
      money: entity.money as any,
      health: entity.health as any,
      max_health: entity.maxHealth as any,
      active_max_health: entity.activeMaxHealth as any,
    } as playable_character;
  }
}

export default PlayableCharacterMapper;
