// Auto-generated by tools/generate-mappers.ts
import { objects, Prisma } from "@prisma/client";
import { ObjectsEntity } from "../../entities/objects/objects.entity";
import { objects_rarity as PrismaObjectsRarity } from "@prisma/client";
import { objects_rarity as DomainObjectsRarity } from '../../enums/objects_rarity'
import { ObjectParserForMapper } from "../../helpers/ObjectParserForMapper.helper";

export class ObjectsMapper {
  static prismaToEntity(
    model: Prisma.objectsGetPayload<{
      include: {
        elements?: true
        tiles?: {
          include: {
            structures_structures_location_idTotiles?: {
              include: {
                tiles_structures_location_idTotiles?: true;
                tiles_tiles_structure_idTostructures?: true;
              };
            };
            structures_tiles_structure_idTostructures?: {
              include: {
                tiles_structures_location_idTotiles?: true;
                tiles_tiles_structure_idTostructures?: true;
              };
            };
          };
        };
        spells?: {
          include: {
            effects?: true
            skill_usage_spells_skill_usageToskill_usage?: true
          };
        };
        weapon?: {
          include: {
            elements?: true
            skill_usage_weapon_skill_usageToskill_usage?: true
          };
        };
        armor?: {
          include: {
            elements?:true,
            skill_usage_armor_skill_usageToskill_usage?:true
          }
        }
      };
    }>
  ): ObjectsEntity {
    const mapped: ObjectsEntity = {
      id:
        model.id !== null && model.id !== undefined ? model.id.toString() : "",
      name:
        model.name !== null && model.name !== undefined
          ? model.name.toString()
          : "",
      elementId:
        model.element_id !== null && model.element_id !== undefined
          ? model.element_id.toString()
          : "",
      rarity: model.rarity !== undefined ? (DomainObjectsRarity[model.rarity as keyof typeof PrismaObjectsRarity]) : DomainObjectsRarity.COMMON,
      skillUsageId:
        model.skill_usage_id !== null && model.skill_usage_id !== undefined
          ? model.skill_usage_id.toString()
          : "",
      diceNeeded:
        model.dice_needed !== null && model.dice_needed !== undefined
          ? model.dice_needed.toString()
          : "",
      locationId:
        model.location_id !== null && model.location_id !== undefined
          ? model.location_id.toString()
          : "",
      description:
        model.description !== null && model.description !== undefined
          ? model.description.toString()
          : "",
      priceSell:
        model.price_sell !== null && model.price_sell !== undefined
          ? model.price_sell.toString()
          : "",
      priceBuy:
        model.price_buy !== null && model.price_buy !== undefined
          ? model.price_buy.toString()
          : "",
      armor: model.armor ? ObjectParserForMapper(model.armor) : undefined,
      elements: model.elements ? ObjectParserForMapper(model.elements) : undefined,
      tiles: model.tiles ? ObjectParserForMapper(model.tiles) : undefined,
      spells: model.spells ? ObjectParserForMapper(model.spells) : undefined,
      weapon: model.weapon ? ObjectParserForMapper(model.weapon) : undefined,
    };

    return mapped;
  }

  static entityToPrisma(entity: ObjectsEntity): objects {
    // ⚠️ Ajusta manualmente si tu modelo tiene campos obligatorios/autogenerados.
    return {
      id: entity.id as any,
      name: entity.name as any,
      element_id: entity.elementId as any,
      rarity: entity.rarity as any,
      skill_usage_id: entity.skillUsageId as any,
      dice_needed: entity.diceNeeded as any,
      location_id: entity.locationId as any,
      description: entity.description as any,
      price_sell: entity.priceSell as any,
      price_buy: entity.priceBuy as any,
    } as objects;
  }
}

export default ObjectsMapper;
