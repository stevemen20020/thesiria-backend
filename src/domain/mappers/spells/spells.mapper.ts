// Auto-generated by tools/generate-mappers.ts
import { spells, Prisma } from "@prisma/client";
import { SpellsEntity } from "../../entities/spells/spells.entity";
import { ObjectParserForMapper } from "../../helpers/ObjectParserForMapper.helper";
import { spells_spell_type as PrismSpellType} from '@prisma/client'
import { spells_spell_type as DomainSpellType} from '../../enums/spells_spell_type'

export class SpellsMapper {
  static prismaToEntity(
    model: Prisma.spellsGetPayload<{
      include: {
        objects?: {
          include: {
            elements?: {
              include: {
                affinity?: true;
                armor?: true;
                objects?: true;
                weapon?: true;
              };
            };
          };
        };
        effects?: true
      };
    }>
  ): SpellsEntity {
    const mapped: SpellsEntity = {
      id:
        model.id !== null && model.id !== undefined ? model.id.toString() : "",
      name:
        model.name !== null && model.name !== undefined
          ? model.name.toString()
          : "",
      description:
        model.description !== null && model.description !== undefined
          ? model.description.toString()
          : "",
      idElement:
        model.id_element !== null && model.id_element !== undefined
          ? model.id_element.toString()
          : "",
      maxUses:
        model.max_uses !== null && model.max_uses !== undefined
          ? model.max_uses.toString()
          : "",
      isGroup:
        model.is_group !== null && model.is_group !== undefined
          ? model.is_group.toString()
          : "",
      upgradeItemId:
        model.upgrade_item_id !== null && model.upgrade_item_id !== undefined
          ? model.upgrade_item_id.toString()
          : "",
      upgradeCostLvl2:
        model.upgrade_cost_lvl2 !== null &&
        model.upgrade_cost_lvl2 !== undefined
          ? model.upgrade_cost_lvl2.toString()
          : "",
      upgradeCostLvl3:
        model.upgrade_cost_lvl3 !== null &&
        model.upgrade_cost_lvl3 !== undefined
          ? model.upgrade_cost_lvl3.toString()
          : "",
      upgradeCostLvl4:
        model.upgrade_cost_lvl4 !== null &&
        model.upgrade_cost_lvl4 !== undefined
          ? model.upgrade_cost_lvl4.toString()
          : "",
      upgradeCostLvl5:
        model.upgrade_cost_lvl5 !== null &&
        model.upgrade_cost_lvl5 !== undefined
          ? model.upgrade_cost_lvl5.toString()
          : "",
      hitPointsLvl_1:
        model.hit_points_lvl_1 !== null && model.hit_points_lvl_1 !== undefined
          ? model.hit_points_lvl_1.toString()
          : "",
      hitPointsLvl_2:
        model.hit_points_lvl_2 !== null && model.hit_points_lvl_2 !== undefined
          ? model.hit_points_lvl_2.toString()
          : "",
      hitPointsLvl_3:
        model.hit_points_lvl_3 !== null && model.hit_points_lvl_3 !== undefined
          ? model.hit_points_lvl_3.toString()
          : "",
      hitPointsLvl_4:
        model.hit_points_lvl_4 !== null && model.hit_points_lvl_4 !== undefined
          ? model.hit_points_lvl_4.toString()
          : "",
      hitPointsLvl_5:
        model.hit_points_lvl_5 !== null && model.hit_points_lvl_5 !== undefined
          ? model.hit_points_lvl_5.toString()
          : "",
      spellType: model.spell_type !== undefined ? (DomainSpellType[model.spell_type as keyof typeof PrismSpellType]) : DomainSpellType.BUFF,
      skillUsage:
        model.skill_usage !== null && model.skill_usage !== undefined
          ? model.skill_usage.toString()
          : "",
      effect:
        model.effect !== null && model.effect !== undefined
          ? model.effect.toString()
          : "",

      objects: model.objects ? ObjectParserForMapper(model.objects) : undefined,
      effects: model.effects ? ObjectParserForMapper(model.effects) : undefined,
    };

    return mapped;
  }

  static entityToPrisma(entity: SpellsEntity): spells {
    // ⚠️ Ajusta manualmente si tu modelo tiene campos obligatorios/autogenerados.
    return {
      id: entity.id as any,
      name: entity.name as any,
      description: entity.description as any,
      id_element: entity.idElement as any,
      max_uses: entity.maxUses as any,
      is_group: entity.isGroup as any,
      upgrade_item_id: entity.upgradeItemId as any,
      upgrade_cost_lvl2: entity.upgradeCostLvl2 as any,
      upgrade_cost_lvl3: entity.upgradeCostLvl3 as any,
      upgrade_cost_lvl4: entity.upgradeCostLvl4 as any,
      upgrade_cost_lvl5: entity.upgradeCostLvl5 as any,
      hit_points_lvl_1: entity.hitPointsLvl_1 as any,
      hit_points_lvl_2: entity.hitPointsLvl_2 as any,
      hit_points_lvl_3: entity.hitPointsLvl_3 as any,
      hit_points_lvl_4: entity.hitPointsLvl_4 as any,
      hit_points_lvl_5: entity.hitPointsLvl_5 as any,
      spell_type: entity.spellType as any,
      skill_usage: entity.skillUsage as any,
      effect: entity.effect as any,
    } as spells;
  }
}

export default SpellsMapper;
