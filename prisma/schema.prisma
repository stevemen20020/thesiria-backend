generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model affinity {
  id                 Int                  @id @unique(map: "id") @default(autoincrement())
  name               String               @db.VarChar(100)
  element_id         Int
  bonus              Int
  color              String               @db.VarChar(10)
  elements           elements             @relation(fields: [element_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "affinity_ibfk_1")
  npc                npc[]
  playable_character playable_character[]

  @@index([element_id], map: "element_id")
}

model armor {
  id                                         Int               @id @unique(map: "id") @default(autoincrement())
  name                                       String            @db.VarChar(200)
  element_id                                 Int?
  defensive_points_lvl1                      Int
  defensive_points_lvl2                      Int
  defensive_points_lvl3                      Int
  defensive_points_lvl4                      Int
  defensive_points_lvl5                      Int
  upgrade_item_id                            Int
  upgrade_cost_lvl2                          Int
  upgrade_cost_lvl3                          Int
  upgrade_cost_lvl4                          Int
  upgrade_cost_lvl5                          Int
  rarity                                     armor_rarity
  location_id                                Int
  skill_usage                                Int?
  dice_needed                                Int?
  found                                      Int?              @db.TinyInt
  price_sell                                 Float             @db.Float
  price_buy                                  Float             @db.Float
  description                                String            @db.Text
  image                                      String?           @db.VarChar(100)
  elements                                   elements?         @relation(fields: [element_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "armor_ibfk_1")
  skill_usage_armor_skill_usageToskill_usage skill_usage?      @relation("armor_skill_usageToskill_usage", fields: [skill_usage], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "armor_ibfk_2")
  tiles                                      tiles             @relation(fields: [location_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "armor_ibfk_3")
  objects                                    objects           @relation(fields: [upgrade_item_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "armor_ibfk_4")
  inventory_armor                            inventory_armor[]
  npc                                        npc[]

  @@index([element_id], map: "element_id")
  @@index([location_id], map: "location_id")
  @@index([skill_usage], map: "skill_usage")
  @@index([upgrade_item_id], map: "upgrade_item_id")
}

model attacks {
  id                                           Int                 @id @unique(map: "id") @default(autoincrement())
  id_playable_character                        Int?
  id_npc                                       Int?
  skill_usage                                  Int
  name                                         String              @db.VarChar(300)
  weapon_type                                  attacks_weapon_type
  attack_type                                  attacks_attack_type
  attack_points                                Int
  favorite                                     Int                 @db.TinyInt
  uses                                         Int
  max_uses                                     Int
  playable_character                           playable_character? @relation(fields: [id_playable_character], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "attacks_ibfk_1")
  skill_usage_attacks_skill_usageToskill_usage skill_usage         @relation("attacks_skill_usageToskill_usage", fields: [skill_usage], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "attacks_ibfk_2")
  npc                                          npc?                @relation(fields: [id_npc], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "attacks_ibfk_3")

  @@index([id_npc], map: "id_npc")
  @@index([id_playable_character], map: "id_playable_character")
  @@index([skill_usage], map: "skill_usage")
}

model devil_fruit {
  id                    Int                  @id @unique(map: "id") @default(autoincrement())
  name                  String               @db.VarChar(100)
  bonus                 Int
  skill_bonused         Int
  description           String               @db.Text
  awakening_description String               @db.Text
  skill_usage           skill_usage          @relation(fields: [skill_bonused], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "devil_fruit_ibfk_1")
  npc                   npc[]
  playable_character    playable_character[]

  @@index([skill_bonused], map: "skill_bonused")
}

model effects {
  id                 Int      @id @unique(map: "id") @default(autoincrement())
  name               String   @db.VarChar(50)
  description        String   @db.Text
  duration_in_rounds Int
  spells             spells[]
}

model elements {
  id       Int        @id @unique(map: "id") @default(autoincrement())
  name     String     @db.VarChar(50)
  affinity affinity[]
  armor    armor[]
  objects  objects[]
  weapon   weapon[]
}

model haki_types {
  id                 Int                  @id @unique(map: "id") @default(autoincrement())
  name               String               @db.VarChar(100)
  description        String               @db.Text
  skill_bonused      Int
  skill_usage        skill_usage          @relation(fields: [skill_bonused], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "haki_types_ibfk_1")
  npc                npc[]
  playable_character playable_character[]

  @@index([skill_bonused], map: "skill_bonused")
}

model inventory {
  id                    Int                 @id @unique(map: "id") @default(autoincrement())
  id_playable_character Int?
  id_object             Int?
  quantity              Int?
  objects               objects?            @relation(fields: [id_object], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "inventory_ibfk_1")
  playable_character    playable_character? @relation(fields: [id_playable_character], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "inventory_ibfk_2")

  @@index([id_object], map: "id_object")
  @@index([id_playable_character], map: "id_playable_character")
}

model inventory_armor {
  id                                                              Int                  @id @unique(map: "id") @default(autoincrement())
  id_user                                                         Int
  id_armor                                                        Int
  level                                                           Int
  playable_character_inventory_armor_id_userToplayable_character  playable_character   @relation("inventory_armor_id_userToplayable_character", fields: [id_user], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "inventory_armor_ibfk_1")
  armor                                                           armor                @relation(fields: [id_armor], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "inventory_armor_ibfk_2")
  playable_character_playable_character_armor_idToinventory_armor playable_character[] @relation("playable_character_armor_idToinventory_armor")

  @@index([id_armor], map: "id_armor")
  @@index([id_user], map: "id_user")
}

model inventory_magic {
  id                 Int                @id @unique(map: "id") @default(autoincrement())
  id_user            Int
  id_spell           Int
  uses               Int
  level              Int?
  playable_character playable_character @relation(fields: [id_user], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "inventory_magic_ibfk_1")
  spells             spells             @relation(fields: [id_spell], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "inventory_magic_ibfk_2")

  @@index([id_spell], map: "id_spell")
  @@index([id_user], map: "id_user")
}

model inventory_weapon {
  id                                                                Int                  @id @unique(map: "id") @default(autoincrement())
  id_user                                                           Int
  id_weapon                                                         Int
  level                                                             Int
  playable_character_inventory_weapon_id_userToplayable_character   playable_character   @relation("inventory_weapon_id_userToplayable_character", fields: [id_user], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "inventory_weapon_ibfk_1")
  weapon                                                            weapon               @relation(fields: [id_weapon], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "inventory_weapon_ibfk_2")
  playable_character_playable_character_weapon_idToinventory_weapon playable_character[] @relation("playable_character_weapon_idToinventory_weapon")

  @@index([id_user], map: "id_user")
  @@index([id_weapon], map: "id_weapon")
}

model loottables {
  id         Int     @id @unique(map: "id") @default(autoincrement())
  id_npc     Int?
  id_monster Int?
  id_object  Int
  amount     Int
  npc        npc?    @relation(fields: [id_npc], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "loottables_ibfk_1")
  objects    objects @relation(fields: [id_object], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "loottables_ibfk_2")

  @@index([id_npc], map: "id_npc")
  @@index([id_object], map: "id_object")
}

model mission_fases {
  id          Int      @id @unique(map: "id") @default(autoincrement())
  id_mission  Int
  description String   @db.Text
  fase        Int
  active      Int      @db.TinyInt
  missions    missions @relation(fields: [id_mission], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "mission_fases_ibfk_1")

  @@index([id_mission], map: "id_mission")
}

model mission_journal {
  id                    Int                @id @unique(map: "id") @default(autoincrement())
  playable_character_id Int
  mission_id            Int
  completed             Int                @db.TinyInt
  playable_character    playable_character @relation(fields: [playable_character_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "mission_journal_ibfk_1")
  missions              missions           @relation(fields: [mission_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "mission_journal_ibfk_2")

  @@index([mission_id], map: "mission_id")
  @@index([playable_character_id], map: "playable_character_id")
}

model missions {
  id              Int               @id @unique(map: "id") @default(autoincrement())
  giver_npc_id    Int?
  name            String            @db.VarChar(200)
  description     String            @db.Text
  mission_fases   mission_fases[]
  mission_journal mission_journal[]
  npc             npc?              @relation(fields: [giver_npc_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "missions_ibfk_1")

  @@index([giver_npc_id], map: "giver_npc_id")
}

model monster {
  id              Int    @id @unique(map: "id") @default(autoincrement())
  name            String @db.VarChar(100)
  strength        Int
  dexterity       Int
  defense         Int
  aim             Int
  speed           Int
  agility         Int
  image_reference String @db.VarChar(255)
  health          Int
  max_health      Int
}

model npc {
  id                         Int                          @id @unique(map: "id") @default(autoincrement())
  name                       String                       @db.VarChar(100)
  biography                  String                       @db.Text
  id_race                    Int
  strength                   Int
  dexterity                  Int
  defense                    Int
  aim                        Int
  vision                     Int
  speed                      Int
  handcraft                  Int
  agility                    Int
  charisma                   Int
  wisdom                     Int
  affinity_id                Int
  chronicler_status          Int                          @db.TinyInt
  image_reference            String                       @db.VarChar(100)
  boss_image_reference       String?                      @db.VarChar(100)
  armor_id                   Int?
  weapon_id                  Int?
  haki_level                 Int?
  haki_type                  Int?
  devil_fruit_id             Int?
  health                     Int
  max_health                 Int
  attacks                    attacks[]
  loottables                 loottables[]
  missions                   missions[]
  races                      races                        @relation(fields: [id_race], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "npc_ibfk_1")
  affinity                   affinity                     @relation(fields: [affinity_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "npc_ibfk_2")
  armor                      armor?                       @relation(fields: [armor_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "npc_ibfk_3")
  weapon                     weapon?                      @relation(fields: [weapon_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "npc_ibfk_4")
  haki_types                 haki_types?                  @relation(fields: [haki_type], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "npc_ibfk_5")
  devil_fruit                devil_fruit?                 @relation(fields: [devil_fruit_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "npc_ibfk_6")
  npc_inventory              npc_inventory[]
  playable_character_journal playable_character_journal[]

  @@index([affinity_id], map: "affinity_id")
  @@index([armor_id], map: "armor_id")
  @@index([devil_fruit_id], map: "devil_fruit_id")
  @@index([haki_type], map: "haki_type")
  @@index([id_race], map: "id_race")
  @@index([weapon_id], map: "weapon_id")
}

model npc_inventory {
  id        Int     @id @unique(map: "id") @default(autoincrement())
  id_npc    Int
  id_object Int
  quantity  Int
  objects   objects @relation(fields: [id_object], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "npc_inventory_ibfk_1")
  npc       npc     @relation(fields: [id_npc], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "npc_inventory_ibfk_2")

  @@index([id_npc], map: "id_npc")
  @@index([id_object], map: "id_object")
}

model objects {
  id             Int             @id @unique(map: "id") @default(autoincrement())
  name           String          @db.VarChar(100)
  element_id     Int?
  rarity         objects_rarity
  skill_usage_id Int?
  dice_needed    Int?
  location_id    Int?
  description    String          @db.Text
  price_sell     Float           @db.Float
  price_buy      Float           @db.Float
  armor          armor[]
  inventory      inventory[]
  loottables     loottables[]
  npc_inventory  npc_inventory[]
  elements       elements?       @relation(fields: [element_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "objects_ibfk_1")
  skill_usage    skill_usage?    @relation(fields: [skill_usage_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "objects_ibfk_2")
  tiles          tiles?          @relation(fields: [location_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "objects_ibfk_3")
  spells         spells[]
  weapon         weapon[]

  @@index([element_id], map: "element_id")
  @@index([location_id], map: "location_id")
  @@index([skill_usage_id], map: "skill_usage_id")
}

model playable_character {
  id                                                              Int                          @id @unique(map: "id") @default(autoincrement())
  user_id                                                         Int
  name                                                            String                       @db.VarChar(100)
  biography                                                       String?                      @db.Text
  id_race                                                         Int
  positive_characteristic_1                                       String?                      @db.Text
  positive_characteristic_2                                       String?                      @db.Text
  positive_characteristic_3                                       String?                      @db.Text
  negative_characteristic_1                                       String?                      @db.Text
  negative_characteristic_2                                       String?                      @db.Text
  strength                                                        Int
  dexterity                                                       Int
  defense                                                         Int
  aim                                                             Int
  vision                                                          Int
  speed                                                           Int
  handcraft                                                       Int
  agility                                                         Int
  charisma                                                        Int
  wisdom                                                          Int
  affinity_id                                                     Int
  chronicler_status                                               Int                          @db.TinyInt
  image_reference                                                 String?                      @db.VarChar(100)
  armor_id                                                        Int?
  weapon_id                                                       Int?
  haki_level                                                      Int?
  haki_type_id                                                    Int?
  devil_fruit_id                                                  Int?
  devil_fruit_awakening                                           Int?                         @db.TinyInt
  money                                                           Float?                       @db.Float
  health                                                          Float?                       @db.Float
  max_health                                                      Int?
  active_max_health                                               Int?
  attacks                                                         attacks[]
  inventory                                                       inventory[]
  inventory_armor_inventory_armor_id_userToplayable_character     inventory_armor[]            @relation("inventory_armor_id_userToplayable_character")
  inventory_magic                                                 inventory_magic[]
  inventory_weapon_inventory_weapon_id_userToplayable_character   inventory_weapon[]           @relation("inventory_weapon_id_userToplayable_character")
  mission_journal                                                 mission_journal[]
  users                                                           users                        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "playable_character_ibfk_1")
  races                                                           races                        @relation(fields: [id_race], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "playable_character_ibfk_2")
  affinity                                                        affinity                     @relation(fields: [affinity_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "playable_character_ibfk_3")
  inventory_armor_playable_character_armor_idToinventory_armor    inventory_armor?             @relation("playable_character_armor_idToinventory_armor", fields: [armor_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "playable_character_ibfk_4")
  inventory_weapon_playable_character_weapon_idToinventory_weapon inventory_weapon?            @relation("playable_character_weapon_idToinventory_weapon", fields: [weapon_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "playable_character_ibfk_5")
  haki_types                                                      haki_types?                  @relation(fields: [haki_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "playable_character_ibfk_6")
  devil_fruit                                                     devil_fruit?                 @relation(fields: [devil_fruit_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "playable_character_ibfk_7")
  playable_character_journal                                      playable_character_journal[]

  @@index([affinity_id], map: "affinity_id")
  @@index([armor_id], map: "armor_id")
  @@index([devil_fruit_id], map: "devil_fruit_id")
  @@index([haki_type_id], map: "haki_type_id")
  @@index([id_race], map: "id_race")
  @@index([user_id], map: "user_id")
  @@index([weapon_id], map: "weapon_id")
}

model playable_character_journal {
  id                    Int                @id @unique(map: "id") @default(autoincrement())
  playable_character_id Int
  npc_id                Int
  relationship          Int
  playable_character    playable_character @relation(fields: [playable_character_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "playable_character_journal_ibfk_1")
  npc                   npc                @relation(fields: [npc_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "playable_character_journal_ibfk_2")

  @@index([npc_id], map: "npc_id")
  @@index([playable_character_id], map: "playable_character_id")
}

model races {
  id                 Int                  @id @unique(map: "id") @default(autoincrement())
  race               String               @db.VarChar(100)
  strength_bonus     Int
  dexterity_bonus    Int
  defense_bonus      Int
  aim_bonus          Int
  vision_bonus       Int
  speed_bonus        Int
  handcraft_bonus    Int
  agility_bonus      Int
  charisma_bonus     Int
  wisdom_bonus       Int
  npc                npc[]
  playable_character playable_character[]
}

model skill_usage {
  id                                       Int           @id @unique(map: "id") @default(autoincrement())
  name                                     String        @db.VarChar(50)
  armor_armor_skill_usageToskill_usage     armor[]       @relation("armor_skill_usageToskill_usage")
  attacks_attacks_skill_usageToskill_usage attacks[]     @relation("attacks_skill_usageToskill_usage")
  devil_fruit                              devil_fruit[]
  haki_types                               haki_types[]
  objects                                  objects[]
  spells_spells_skill_usageToskill_usage   spells[]      @relation("spells_skill_usageToskill_usage")
  weapon_weapon_skill_usageToskill_usage   weapon[]      @relation("weapon_skill_usageToskill_usage")
}

model spells {
  id                                          Int               @id @unique(map: "id") @default(autoincrement())
  name                                        String            @unique(map: "name") @db.VarChar(200)
  description                                 String            @db.Text
  id_element                                  Int
  max_uses                                    Int
  is_group                                    Int               @db.TinyInt
  upgrade_item_id                             Int
  upgrade_cost_lvl2                           Int
  upgrade_cost_lvl3                           Int
  upgrade_cost_lvl4                           Int
  upgrade_cost_lvl5                           Int
  hit_points_lvl_1                            Int
  hit_points_lvl_2                            Int
  hit_points_lvl_3                            Int
  hit_points_lvl_4                            Int
  hit_points_lvl_5                            Int
  spell_type                                  spells_spell_type
  skill_usage                                 Int?
  effect                                      Int?
  inventory_magic                             inventory_magic[]
  objects                                     objects           @relation(fields: [upgrade_item_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "spells_ibfk_1")
  effects                                     effects?          @relation(fields: [effect], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "spells_ibfk_2")
  skill_usage_spells_skill_usageToskill_usage skill_usage?      @relation("spells_skill_usageToskill_usage", fields: [skill_usage], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "spells_ibfk_3")

  @@index([effect], map: "effect")
  @@index([skill_usage], map: "skill_usage")
  @@index([upgrade_item_id], map: "upgrade_item_id")
}

model structures {
  id                                   Int              @id @unique(map: "id") @default(autoincrement())
  name                                 String           @db.VarChar(100)
  description                          String           @db.Text
  difficulty                           Int
  location_id                          Int?
  type                                 structures_type?
  tiles_structures_location_idTotiles  tiles?           @relation("structures_location_idTotiles", fields: [location_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "structures_ibfk_1")
  tiles_tiles_structure_idTostructures tiles[]          @relation("tiles_structure_idTostructures")

  @@index([location_id], map: "location_id")
}

model talismanes {
  id          Int    @id @unique(map: "id") @default(autoincrement())
  name        String @db.VarChar(100)
  description String @db.Text
  type        Int
  cooldown    Int?
  discovered  Int    @db.TinyInt
}

model tiles {
  id                                        Int          @id @unique(map: "id") @default(autoincrement())
  name                                      String       @db.VarChar(10)
  image                                     String       @db.VarChar(100)
  structure_id                              Int
  armor                                     armor[]
  objects                                   objects[]
  structures_structures_location_idTotiles  structures[] @relation("structures_location_idTotiles")
  structures_tiles_structure_idTostructures structures   @relation("tiles_structure_idTostructures", fields: [structure_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "tiles_ibfk_1")
  weapon                                    weapon[]

  @@index([structure_id], map: "structure_id")
}

model users {
  id                 Int                  @id @unique(map: "id") @default(autoincrement())
  user_name           String               @db.VarChar(100)
  name               String?              @db.VarChar(100)
  last_name          String               @db.VarChar(100)
  email              String               @unique @db.VarChar(100)
  password           String               @db.VarChar(100)
  playable_character playable_character[]
}

model weapon {
  id                                          Int                @id @unique(map: "id") @default(autoincrement())
  name                                        String             @db.VarChar(200)
  element_id                                  Int?
  damage_points_lvl1                          Int
  damage_points_lvl2                          Int
  damage_points_lvl3                          Int
  damage_points_lvl4                          Int
  damage_points_lvl5                          Int
  upgrade_item_id                             Int
  upgrade_cost_lvl2                           Int
  upgrade_cost_lvl3                           Int
  upgrade_cost_lvl4                           Int
  upgrade_cost_lvl5                           Int
  rarity                                      weapon_rarity
  durability                                  Int
  durability_max                              Int
  chipping                                    Float?             @db.Float
  ammo                                        Int?
  weapon_type                                 weapon_weapon_type
  location_id                                 Int?
  skill_usage                                 Int?
  dice_needed                                 Int?
  found                                       Int?               @db.TinyInt
  price_sell                                  Float              @db.Float
  price_buy                                   Float              @db.Float
  description                                 String             @db.Text
  image                                       String?            @db.VarChar(100)
  inventory_weapon                            inventory_weapon[]
  npc                                         npc[]
  elements                                    elements?          @relation(fields: [element_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "weapon_ibfk_1")
  skill_usage_weapon_skill_usageToskill_usage skill_usage?       @relation("weapon_skill_usageToskill_usage", fields: [skill_usage], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "weapon_ibfk_2")
  tiles                                       tiles?             @relation(fields: [location_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "weapon_ibfk_3")
  objects                                     objects            @relation(fields: [upgrade_item_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "weapon_ibfk_4")

  @@index([element_id], map: "element_id")
  @@index([location_id], map: "location_id")
  @@index([skill_usage], map: "skill_usage")
  @@index([upgrade_item_id], map: "upgrade_item_id")
}

enum objects_rarity {
  COMMON
  UNCOMMON
  RARE
  EPIC
  LEGENDARY
  MYTHIC
}

enum attacks_weapon_type {
  RANGE
  MELEE
  MAGIC
}

enum structures_type {
  CITY
  DUNGEON
  CAVE
}

enum attacks_attack_type {
  PLAYER2NPC
  PLAYER2MONSTER
  PLAYER2PLAYER
  NPC2PLAYER
  NPC2NPC
  NPC2MONSTER
  MONSTER2PLAYER
  MONSTER2NPC
  MONSTER2MONSTER
}

enum armor_rarity {
  COMMON
  UNCOMMON
  RARE
  EPIC
  LEGENDARY
  MYTHIC
}

enum weapon_rarity {
  COMMON
  UNCOMMON
  RARE
  EPIC
  LEGENDARY
  MYTHIC
}

enum spells_spell_type {
  HEALTH
  DAMAGE
  EFFECT
  BUFF
  DEBUFF
}

enum weapon_weapon_type {
  RANGE
  MELEE
  MAGIC
}
